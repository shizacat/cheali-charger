/*
    cheali-charger - open source firmware for a variety of LiPo chargers
    Copyright (C) 2015  Pawe≈Ç Stawicki. All right reserved.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include "AnalogInputsPrivate.h"
#include "cpu/memory.h"
#include "Utils.h"

const AnalogInputs::DefaultValues AnalogInputs::inputsP_[] PROGMEM = {{

    {{{{{calibration[0].p[0].x},  {calibration[0].p[0].y}}},         {{{calibration[0].p[1].x},  {calibration[0].p[1].y}}}}},   //Vout_plus_pin
    {{{{{calibration[1].p[0].x},  {calibration[1].p[0].y}}},         {{{calibration[1].p[1].x},  {calibration[1].p[1].y}}}}},   //Vout_minus_pin
    {{{{{calibration[2].p[0].x},  {calibration[2].p[0].y}}},         {{{calibration[2].p[1].x},  {calibration[2].p[1].y}}}}},   //Ismps
    {{{{{calibration[3].p[0].x},  {calibration[3].p[0].y}}},         {{{calibration[3].p[1].x},  {calibration[3].p[1].y}}}}},   //Idischarge

    {{{{{calibration[4].p[0].x},  {calibration[4].p[0].y}}},         {{{calibration[4].p[1].x},  {calibration[4].p[1].y}}}}},   //VoutMux
    {{{{{calibration[5].p[0].x},  {calibration[5].p[0].y}}},         {{{calibration[5].p[1].x},  {calibration[5].p[1].y}}}}},   //Tintern
    {{{{{calibration[6].p[0].x},  {calibration[6].p[0].y}}},         {{{calibration[6].p[1].x},  {calibration[6].p[1].y}}}}},   //Vin
    {{{{{calibration[7].p[0].x},  {calibration[7].p[0].y}}},         {{{calibration[7].p[1].x},  {calibration[7].p[1].y}}}}},   //Textern

    {{{{{calibration[8].p[0].x},  {calibration[8].p[0].y}}},         {{{calibration[8].p[1].x},  {calibration[8].p[1].y}}}}},   //Vb0_pin
    {{{{{calibration[9].p[0].x},  {calibration[9].p[0].y}}},         {{{calibration[9].p[1].x},  {calibration[9].p[1].y}}}}},   //Vb1_pin
    {{{{{calibration[10].p[0].x},  {calibration[10].p[0].y}}},         {{{calibration[10].p[1].x},  {calibration[10].p[1].y}}}}},   //Vb2_pin
    {{{{{calibration[11].p[0].x},  {calibration[11].p[0].y}}},         {{{calibration[11].p[1].x},  {calibration[11].p[1].y}}}}},   //Vb3_pin
    {{{{{calibration[12].p[0].x},  {calibration[12].p[0].y}}},         {{{calibration[12].p[1].x},  {calibration[12].p[1].y}}}}},   //Vb4_pin
    {{{{{calibration[13].p[0].x},  {calibration[13].p[0].y}}},         {{{calibration[13].p[1].x},  {calibration[13].p[1].y}}}}},   //Vb5_pin
    {{{{{calibration[14].p[0].x},  {calibration[14].p[0].y}}},         {{{calibration[14].p[1].x},  {calibration[14].p[1].y}}}}},   //Vb6_pin

#if MAX_BALANCE_CELLS > 6
    {{{{{calibration[15].p[0].x},  {calibration[15].p[0].y}}},         {{{calibration[15].p[1].x},  {calibration[15].p[1].y}}}}},   //Vb7_pin
    {{{{{calibration[16].p[0].x},  {calibration[16].p[0].y}}},         {{{calibration[16].p[1].x},  {calibration[16].p[1].y}}}}},   //Vb8_pin
#endif

    {{{{{calibration[17].p[0].x},  {calibration[17].p[0].y}}},         {{{calibration[17].p[1].x},  {calibration[17].p[1].y}}}}},   //IsmpsSet
    {{{{{calibration[18].p[0].x},  {calibration[18].p[0].y}}},         {{{calibration[18].p[1].x},  {calibration[18].p[1].y}}}}},   //IdischargeSet
}};

namespace {{
    void assert() {{
        STATIC_ASSERT(sizeOfArray(AnalogInputs::inputsP_) == AnalogInputs::PHYSICAL_INPUTS);
    }}
}}
